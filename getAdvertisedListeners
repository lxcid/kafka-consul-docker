#!/usr/bin/env python

import argparse
import json
import os
import requests
import sys
import time

def get_kafka_service(brokerid, retries=4):
    consul_http_addr = os.getenv('CONSUL_HTTP_ADDR', 'consul:8500')
    for attempt in range(retries):
        try:
            r = requests.get(f"http://{consul_http_addr}/v1/catalog/service/kafka?tag=brokerid%3D{args.brokerid}")
            r.raise_for_status()
            res = r.json()
            if len(res) > 0:
                return res[0]
            else:
                time.sleep(2 ** attempt)
        except requests.exceptions.RequestException as e:
            time.sleep(2 ** attempt)
    return None

def get_instance_metadata(path, retries=3):
    for attempt in range(retries):
        try:
            r = requests.get(f"http://instance-data/latest/meta-data/{path}")
            r.raise_for_status()
            if len(r.text) > 0:
                return r.text
            else:
                time.sleep(2 ** attempt)
        except requests.exceptions.RequestException as e:
            time.sleep(2 ** attempt)
    return None


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Get all possible advertised listeners for Kafka.')
    parser.add_argument('brokerid', type=int, help='brokerid')
    args = parser.parse_args()

    if int(args.brokerid) <= 0:
        print(f"[ERR] Unknown Broker ID {args.brokerid}.", file=sys.stderr)
        exit(1)

    kafka_service = get_kafka_service(args.brokerid)
    if kafka_service is None:
        print("")
        exit(0)

    service_port = kafka_service['ServicePort']
    advertised_listeners = []

    # FIXME: (me@lxcid.com) requirement failed: Each listener must have a different port
    #                       So we use public hostname for nowâ€¦
    # local_hostname = get_instance_metadata('local-hostname')
    # if not local_hostname is None:
    #     scheme = 'PLAINTEXT'
    #     advertised_listeners.append({
    #         'Address': local_hostname,
    #         'Port': service_port,
    #         'Scheme': scheme,
    #         'URI': f"{scheme}://{local_hostname}:{service_port}",
    #     })

    public_hostname = get_instance_metadata('public-hostname')
    if not public_hostname is None:
        scheme = 'PLAINTEXT'
        advertised_listeners.append({
            'Address': public_hostname,
            'Port': service_port,
            'Scheme': scheme,
            'URI': f"{scheme}://{public_hostname}:{service_port}",
        })

    print(",".join([item['URI'] for item in advertised_listeners]))
    exit(0)
